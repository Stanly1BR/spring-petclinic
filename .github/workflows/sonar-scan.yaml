name: CI/CD workflow for Maven Build and Sonar Code scan

on:
  push:
    branches:
      - main # O branch principal do seu repositório (pode ser 'master' em alguns casos)
  workflow_dispatch: # Permite disparar o workflow manualmente pela interface do GitHub

jobs:
  build:
    runs-on: ubuntu-latest # O sistema operacional onde o job será executado

    steps:
    - name: Checkout code # Passo para clonar o código do repositório
      uses: actions/checkout@v4 # Usando a versão mais recente da action de checkout
      with:
        fetch-depth: 0 # Necessário para o SonarQube analisar o histórico completo do código

    - name: Set up JDK 17 # Passo para configurar o ambiente Java
      uses: actions/setup-java@v4 # Usando a versão mais recente da action de setup-java
      with:
        distribution: 'temurin' # Uma distribuição OpenJDK comum e recomendada
        java-version: '17' # Versão do Java compatível com Spring PetClinic

    - name: Build with Maven # Passo para compilar o projeto Maven
      run: mvn clean install # Comando correto para o Spring PetClinic (pom.xml está na raiz)

    - name: SonarQube Scan # Passo para executar a análise do SonarQube
      uses: sonarsource/sonarqube-scan-action@v2.0.0 # Usando uma versão específica para estabilidade
      with:
        projectBaseDir: . # Indica que o projeto base para a análise é o diretório raiz do repositório
        args: > # Argumentos adicionais para o SonarScanner
          -Dsonar.projectKey=my-Java-web-app # Substitua pelo Project Key que você configurou no SonarQube
          # -Dsonar.organization=my-org # Descomente e ajuste se estiver usando SonarCloud ou uma organização específica
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # Token de autenticação do SonarQube (armazenado como secret)
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} # URL do seu servidor SonarQube (armazenado como secret)
